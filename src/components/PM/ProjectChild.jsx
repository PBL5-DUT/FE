import React, { useState, useEffect } from 'react';
import { apiConfig } from '../../config/apiConfig';
import ProjectCard from './ProjectCard';
import { FaSpinner } from 'react-icons/fa';

const ProjectChild = ({ projectId }) => {
  const [childProjects, setChildProjects] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

    useEffect(() => {
  const fetchChildProjects = async () => {
    try {
      setLoading(true);
      const response = await apiConfig.get(`/projects/child-projects/${projectId}`);

      // N·∫øu l√† m·∫£ng r·ªóng ho·∫∑c kh√¥ng c√≥ d·ªØ li·ªáu, v·∫´n l√† h·ª£p l·ªá
      if (Array.isArray(response.data)) {
        setChildProjects(response.data);
        setError(null);
      } else {
        // N·∫øu response kh√¥ng ph·∫£i m·∫£ng, coi l√† l·ªói d·ªØ li·ªáu
        throw new Error('Invalid response format');
      }
    } catch (err) {
      console.error('Error fetching child projects:', err);

      // Ch·ªâ setError n·∫øu l√† l·ªói th·∫≠t s·ª±, kh√¥ng ph·∫£i "kh√¥ng c√≥ d·ª± √°n con"
      setError('Kh√¥ng th·ªÉ t·∫£i danh s√°ch d·ª± √°n con. Vui l√≤ng th·ª≠ l·∫°i sau.');
      setChildProjects([]); // reset ƒë·ªÉ kh√¥ng hi·ªán d·ªØ li·ªáu c≈© n·∫øu c√≥
    } finally {
      setLoading(false);
    }
  };

  if (projectId) {
    fetchChildProjects();
  }
}, [projectId]);

  if (loading) {
    return (
      <div className="flex flex-col items-center justify-center min-h-[400px]">
        <FaSpinner className="animate-spin text-4xl text-blue-500 mb-4" />
        <p className="text-gray-600">ƒêang t·∫£i d·ª± √°n con...</p>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-[400px] flex items-center justify-center">
        <div className="text-center p-8 bg-red-50 rounded-xl max-w-md w-full">
          <div className="text-red-500 text-5xl mb-4">‚ö†Ô∏è</div>
          <h3 className="text-lg font-medium text-red-800 mb-2">ƒê√£ c√≥ l·ªói x·∫£y ra</h3>
          <p className="text-red-600 mb-4">{error}</p>
          <button
            onClick={() => window.location.reload()}
            className="px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 transition-colors"
          >
            Th·ª≠ l·∫°i
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="container mx-auto px-4 py-8">
      <div className="flex justify-between items-center mb-8">
        <h2 className="text-2xl font-bold text-gray-800">
          D·ª± √°n con ({childProjects.length})
        </h2>
      </div>

      {childProjects.length === 0 ? (
        <div className="bg-white rounded-xl shadow-md p-8 text-center">
          <div className="text-gray-400 text-5xl mb-4">üìÇ</div>
          <h3 className="text-xl font-medium text-gray-800 mb-2">
            Ch∆∞a c√≥ d·ª± √°n con n√†o
          </h3>
          <p className="text-gray-500">
            Hi·ªán t·∫°i ch∆∞a c√≥ d·ª± √°n con n√†o ƒë∆∞·ª£c t·∫°o trong d·ª± √°n n√†y.
          </p>
        </div>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-1 gap-6">
          {childProjects.map((project) => (
            <ProjectCard
              key={project.projectId}
              project={project}
              className="h-full"
            />
          ))}
        </div>
      )}
    </div>
  );
};

export default ProjectChild;